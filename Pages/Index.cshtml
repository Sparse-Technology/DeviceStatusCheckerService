@page
@using Microsoft.AspNetCore.Hosting
@using System.Net
@using System.Web
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment WebHostEnvironment

@model IndexModel
@{
    ViewData["Title"] = "Device Monitoring";
}

<header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark p-2">
        <div class="d-flex flex-row align-items-center justify-content-between me-2 ms-2 w-100">

            <!-- Brand -->
            <div class="fs-3 text-light navbar-brand">
                <a class="navbar-brand" href="#" onclick="refreshPage()">Device Monitoring</a>
            </div>

            <!-- Device Status Navbar -->
            <div class="d-flex flex-row text-light justify-content-end align-items-center flex-wrap">
                <div class="fs-5 me-4 mb-2">
                    <span class="text-success fw-bold">Online: </span>
                    <span class="badge bg-success">@Model.Devices.Count(d => d.DeviceActiveStatus == Models.DeviceActiveStatus.ONLINE)</span>
                </div>

                <div class="fs-5 me-4 mb-2">
                    <span class="text-danger fw-bold">Offline: </span>
                    <span class="badge bg-danger">@Model.Devices.Count(d => d.DeviceActiveStatus == Models.DeviceActiveStatus.OFFLINE)</span>
                </div>

                <div class="fs-5 me-4 mb-2">
                    <span class="text-warning fw-bold">Unknown: </span>
                    <span class="badge bg-warning">@Model.Devices.Count(d => d.DeviceActiveStatus == Models.DeviceActiveStatus.UNKNOWN)</span>
                </div>

                <div class="fs-5 me-4 mb-2">
                    <span class="text-info fw-bold">Total: </span>
                    <span class="badge bg-info">@Model.Devices.Count</span>
                </div>
            </div>
        </div>
    </nav>
</header>


<div data-simplebar>
    <div class="d-flex flex-row justify-content-between p-2 ms-2 me-2">
        <!-- Tagify Filter Bar with Button -->
        <div class="d-flex input-group w-50">
            <input id="tagify-filter-bar"
                   type="text"
                   class="form-control form-control-solid w-25"
                   aria-label=""
                   onkeyup="filterPageTagify" />
            <button class="btn btn-outline-warning bg-gray p-2" onclick="checkVisibleFilteredDevices()">
                <i class="fa-regular fa-square-check fa-lg"></i>
                Check Visible Devices
            </button>
            <button class="btn btn-outline-warning bg-gray p-2" onclick="resetCameras()">
                <i class="fa-regular fa-square-minus fa-lg"></i>
                Uncheck Visible Devices
            </button>
        </div>
        <div>
            @*             <button class="btn btn-dark" onclick="showCreateDeviceModal()">
            Create Device
            </button> *@
        </div>
    </div>



    <div class="accordion-item">
        @* Accordion Header *@
        <div class="d-flex justify-content-center accordion-header bg-secondary border-bottom border-dark shadow p-1 mb-3 rounded" id="headingOne">

            <button class="d-flex justify-content-center border-0 p-0 m-0" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                <i class="fas fa-chevron-down fa-xl bg-secondary p-0 border-0"></i>
            </button>

        </div>

        @* Accordion Body *@
        <div id="collapseOne" class="accordion-collapse collapse hide" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div id="exportMenu" class="card bg-light">
                    <div class="d-flex flex-column mt-2 bg-light">
                        <button onclick="toggleExportOptions()" type="submit" class="btn btn-outline-dark mb-2">
                            <i class="fa-solid fa-arrow-right-arrow-left"></i>
                            <span id="exportOptionsButton">Advanced Export Options</span>
                        </button>

                        <div class="d-flex flex-row justify-content-between ms-2 me-2">

                            <div id="dynamicKeys" class="row g-2 p-3 col-6">

                                <div class="d-flex justify-content-end mt-0 p-0 btn-group">
                                    <button type="submit" id="resetLabelsButton" class="btn btn-secondary mb-2" onclick="resetLabels()">
                                        <i class="fa-solid fa-tags"></i>
                                        Reset Labels
                                        <i class="fa-solid fa-rotate-left"></i>
                                    </button>
                                    <button type="submit" id="resetFieldsButton" class="btn btn-secondary bg-gray mb-2" onclick="resetFields()">
                                        <i class="fa-solid fa-rectangle-list"></i>
                                        Reset Fields
                                        <i class="fa-solid fa-rotate-left"></i>
                                    </button>
                                    <button type="submit" id="toggleSelectAllLabels" class="btn btn-outline-warning bg-light-gray mb-2" onclick="toggleSelectLabels()">
                                        <i class="fa-regular fa-square-check"></i>
                                        Toggle All Labels
                                    </button>
                                </div>

                                @foreach (var property in typeof(Models.DeviceModel).GetProperties())
                                {
                                    <div class="col-sm-12 col-xl-6 mb-1">
                                        <!-- Adjust column classes as needed -->
                                        <div class="d-flex flex-row">
                                            <div class="form-check">
                                                <input type="checkbox" class="btn-check" id="@($"btncheck_{property.Name}")" autocomplete="off" onclick="toggleRenameKeys()">
                                                <label class="btn btn-outline-secondary" for="@($"btncheck_{property.Name}")">@property.Name</label>
                                            </div>
                                            <div class="ms-2">
                                                <span>:</span>
                                            </div>
                                            <div class="input-group ms-2">
                                                <input id="@($"btnRenameInput_{property.Name}")" type="text" class="form-control" aria-label="Property value" placeholder="@property.Name" disabled>
                                                <button type="button" class="btn btn-outline-secondary" onclick="resetInput('@property.Name')">
                                                    <i class="fa-solid fa-rotate-left"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div id="advancedExportInput" class="d-none row g-2 p-2 col-6 mb-0 mt-0 p-0">
                                <form class="mt-0 p-0">
                                    <div id="templateInputGroup" class="form-group">
                                        <button type="submit" class="btn mb-2 border-0" disabled>
                                            Input Template
                                        </button>
                                        <textarea class="form-control" id="templateInput" placeholder="Template" rows="15"></textarea>
                                    </div>
                                </form>
                            </div>

                            <div id="advancedExportOutput" class="row g-2 p-2 col-6 mb-0 mt-0 p-0">
                                <form class="mt-0 p-0">
                                    <div class="d-flex flew-row justify-content-between">
                                        <button type="button" class="btn mb-2 border-0" disabled>
                                            Output
                                        </button>
                                        <div class="btn-group">
                                            <button id="copyDevicesJSONButton" type="button" class="btn btn-outline-warning text-dark mb-2" onclick="copyDevicesJSON()">
                                                <i class="fa-solid fa-copy"></i>
                                                Copy
                                            </button>
                                            <button id="publishButton" type="button" class="btn btn-outline-warning text-dark mb-2" onclick="showPublishDeviceModal()">
                                                <i class="fa-solid fa-square-share-nodes"></i>
                                                Publish
                                            </button>
                                        </div>
                                    </div>
                                    <div>
                                        <pre class="language-json">
                                            <code id="templateOutputAdvanced" class="language-json" style="max-height:400px; overflow-y: auto;">
                                            </code>
                                        </pre>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-0 btn-group">
                    <button type="submit" id="exportButton" class="btn btn-warning" onclick="exportSelectedDevices()">
                        <i class="fa-solid fa-arrow-right-from-bracket"></i>
                        Export Devices
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- ModalCreateDevice -->
    <div class="modal fade"
         id="createDeviceModal"
         tabindex="-1"
         role="dialog"
         aria-labelledby="exampleModalCenterTitle"
         aria-hidden="true">

        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Create Device</h5>
                </div>
                <div type="text" id="modalCreateDeviceBody" class="modal-body">
                    <div>
                        <i class="fa-solid fa-person-digging fa-xl "></i>
                        Under Construction
                    </div>
                </div>

                <div class="modal-footer">
                    <div>
                        <button type="button" class="btn btn-secondary" data-dismiss="modalCreateDevice">Close</button>
                        <button type="button" class="btn btn-secondary">Create Device</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- ModalPublishDevice -->
    <div class="modal fade"
         id="publishDeviceModal"
         tabindex="-1"
         role="dialog"
         aria-labelledby="exampleModalCenterTitle"
         aria-hidden="true">

        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Publish Devices</h5>
                </div>
                <div type="text" id="publishDeviceModalBody" class="modal-body">
                    <div>
                        <i class="fa-solid fa-person-digging fa-xl "></i>
                        Under Construction
                    </div>

                    @*                     <form>
                    <!-- URL input -->
                    <div class="mb-3">
                    <label for="urlInput" class="form-label">URL:</label>
                    <input type="url" class="form-control" id="urlInput" placeholder="Enter URL">
                    </div>

                    <!-- Username input -->
                    <div class="mb-3">
                    <label for="usernameInput" class="form-label">Username:</label>
                    <input type="text" class="form-control" id="usernameInput" placeholder="Enter username">
                    </div>

                    <!-- Password input -->
                    <div class="mb-3">
                    <label for="passwordInput" class="form-label">Password:</label>
                    <input type="password" class="form-control" id="passwordInput" placeholder="Enter password">
                    </div>
                    </form> *@


                </div>
                <div class="modal-footer">
                    <div>
                        @*                         <button type="button" class="btn btn-secondary" data-dismiss="modalPublishDevice">Close</button>
                        <button id="publishPostButton" type="button" class="btn btn-warning" onclick="publishDevices()">
                        Publish
                        <i class="fa-solid fa-arrow-right-from-bracket"></i>
                        </button> *@
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Camera Cards Body *@
    <div id="cameraCardsBody" class="container-fluid" style="font-size: small; padding-top: 2rem">
        <div class="d-flex flex-wrap">
            @* Getting Model.Devices *@
            @foreach (var dev in @Model.Devices.OrderBy(d => d.DeviceActiveStatus))
            {
                @* Creating Container as a row double cam *@
                <div class="col-sm-12 col-md-9 col-lg-6 col-xl-4 p-1" data-card="container">

                    @* Creating a CameraCard*@
                    <div class="card d-flex flex-row justify-content-between" data-card="cameraContainer">
                        <div class="card-body">
                            <div>
                                @* Thumbnail *@
                                <div class="d-flex flex- justify-content-between">
                                    @{var imagePathRelative = $"./thumbnails/{dev.UUID}/stream_0__1.jpeg";}
                                    <img src='@imagePathRelative'
                                        onerror="this.onerror=null;this.src='/img/img_camera-thumbnail-resized.jpg';"
                                        class='img-thumbnail card-img-left p-0'
                                        style='width:270px !important; height:152px !important;'>
                                
                                @* Creating Camera Image in a Column*@
                                <div class="d-flex flex-column justify-content-between align-items-end">
                                    <div class="form-check align-self-end">
                                        <input type="checkbox" class="btn-check" id="checkbox_@dev.UUID">
                                        <label class="form-check-label font-weight-bold text-dark btn btn-outline-warning" for="checkbox_@dev.UUID">
                                            Export
                                            <i class="fa-solid fa-file-export"></i>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-2">
                                <hr class="m-0" />
                                @*LastCheckTimeDate*@
                                <div class="row">
                                    <div class="col-lg-4 fw-semibold text-muted ">Last Checked</div>
                                    <div class="col-lg-8 fw-bold" dataFilter>@dev.LastCheckTime.Split(' ')[0]</div>
                                    </div>

                                    @*LastCheckHours*@
                                    <div class="row mb-3">
                                        <div class="col-lg-4 fw-semibold text-muted"></div>
                                        <div class="col-lg-8 fw-bold" dataFilter>@dev.LastCheckTime.Split(' ')[1]</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-4 fw-semibold text-muted">#</div>
                                        <div class="col-lg-8" dataFilter>@dev.UUID</div>
                                    </div>
                                    @*Ip*@
                                    <div class="row">
                                        <div class="col-lg-4 fw-semibold text-muted">IP</div>
                                        <div class="col-lg-8" dataFilter>@dev.IP</div>
                                    </div>
                                    @*Hostname*@
                                    @if (!string.IsNullOrEmpty(dev.Hostname))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">Hostname</div>
                                            <div class="col-lg-8" dataFilter>@dev.Hostname</div>
                                        </div>
                                    }

                                    @*Hostname*@
                                    @if (!string.IsNullOrEmpty(dev.SerialNumber))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">Serial Number</div>
                                            <div class="col-lg-8" dataFilter>@dev.SerialNumber</div>
                                        </div>
                                    }

                                    @*FriendlyName*@
                                    @if (!string.IsNullOrEmpty(dev.FriendlyName))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">FriendlyName</div>
                                            <div class="col-lg-8" dataFilter>@dev.FriendlyName</div>
                                        </div>
                                    }

                                    @*Model*@
                                    @if (!string.IsNullOrEmpty(dev.Model))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">Model</div>
                                            <div class="col-lg-8" dataFilter>@dev.Model</div>
                                        </div>
                                    }

                                    @*Location*@
                                    @if (!string.IsNullOrEmpty(dev.DescriptionLocation))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">Description Location</div>
                                            <div class="col-lg-8"><a href="@dev.DescriptionLocation">@dev.DescriptionLocation</a></div>
                                        </div>
                                    }

                                    @*Presentation URL*@
                                    @if (!string.IsNullOrEmpty(dev.PresentationURL))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">Presentation URL</div>
                                            <div class="col-lg-8"><a href="@dev.PresentationURL">@dev.PresentationURL</a></div>
                                        </div>
                                    }

                                    @*Presentation User*@
                                    @if (!string.IsNullOrEmpty(dev.User))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">User</div>
                                            <div class="col-lg-8" dataFilter>@dev.User</div>
                                        </div>
                                    }

                                    @*Password*@
                                    @if (!string.IsNullOrEmpty(dev.Password))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">Password</div>
                                            <div class="col-lg-8" dataFilter>@dev.Password</div>
                                        </div>
                                    }

                                    @*Notes*@
                                    @if (!string.IsNullOrEmpty(dev.Notes))
                                    {
                                        <div class="row">
                                            <div class="col-lg-4 fw-semibold text-muted">Notes</div>
                                            <div class="col-lg-8" dataFilter>
                                                @(dev.Notes.Contains("discovered", StringComparison.InvariantCultureIgnoreCase) ? Html.Raw("<span class=\"badge bg-success\"><i class=\"bi bi-search\"></i></span> ") : "")
                                                @(dev.Notes.Contains("static", StringComparison.InvariantCultureIgnoreCase) ? Html.Raw("<span class=\"badge bg-secondary\"><i class=\"bi bi-list\"></i></span> ") : "")
                                                @dev.Notes
                                            </div>
                                        </div>
                                    }

                                    @*DeviceStatus*@
                                    <div class="row">
                                        <div class="col-lg-4 fw-semibold text-muted">Status</div>
                                        <div class="col-lg-8">
                                            @switch (dev.DeviceActiveStatus)
                                            {
                                                case Models.DeviceActiveStatus.ONLINE:
                                                    <span class="badge bg-success" dataFilter>Online</span>
                                                    break;
                                                case Models.DeviceActiveStatus.OFFLINE:
                                                    <span class="badge bg-danger" dataFilter>Offline</span>
                                                    break;
                                                default:
                                                    <span class="badge bg-warning" dataFilter>Unknown</span>
                                                    break;
                                            }
                                        </div>
                                    </div>

                                    @*DeviceStreams*@
                                    @if (dev.Streams.Count > 0)
                                    {
                                        <div class="container">

                                            @for (int i = 0; i < dev.Streams.Count; i++)
                                            {
                                                <div class="row">
                                                    <div class="col-lg-4 fw-semibold text-muted">Stream@(i)</div>
                                                    @try
                                                    {
                                                        @switch (dev.Streams[i].Status)
                                                        {
                                                            case Models.StreamStatus.OK:
                                                                <div class="col-lg-8"><a class="badge bg-success" style="white-space: unset !important;" data-toggle="tooltip" title="<img src='./thumbnails/@(dev.UUID)/stream_@(i)__1.jpeg' class='img-thumbnail' style='width:100% !important; height:auto !important;'>">@dev.Streams[i].URI</a></div>
                                                                break;
                                                            case Models.StreamStatus.ERROR:
                                                                <div class="col-lg-8"><a class="badge bg-danger" style="white-space: unset !important;">@dev.Streams[i].URI</a></div>
                                                                break;
                                                            default:
                                                                <div class="col-lg-8"><a class="badge bg-warning" style="white-space: unset !important;">@dev.Streams[i].URI</a></div>
                                                                break;
                                                        }
                                                    }
                                                    catch
                                                    {

                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
}
